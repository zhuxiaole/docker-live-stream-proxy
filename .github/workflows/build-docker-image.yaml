name: Build Docker image

on:
  repository_dispatch:

env:
  IMAGE_NAME: ${{ vars.IMAGE_NAME }}
  IMAGE_TAG: ${{ github.sha }}
  DOCKER_BUILDKIT: 1

jobs:
  build:
    runs-on: ubuntu-latest

    name: Build Docker image for linux/amd64
    strategy:
      fail-fast: false
      matrix:
        seam_version: ["${{ github.event.client_payload.seam_version }}"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Generate release tag
        id: tag
        run: |
          release_tag=`date +%Y%m%d`
          release_name=$release_tag
          echo "release_tag=${release_tag}" >> $GITHUB_OUTPUT
          echo "release_name=${release_name}" >> $GITHUB_OUTPUT
          touch release.txt
          echo "seam version: ${{matrix.seam_version}}" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Prepare softwares
        id: prepare_softwares
        run: |
          sudo apt install -y git tar curl
          curl -sSL https://github.com/Borber/seam/releases/download/${{ matrix.seam_version }}/seam-${{ matrix.seam_version }}.x86_64-unknown-linux-musl.tar.xz -o seam.tar.xz
          mkdir -p seam && tar -xvf seam.tar.xz -C seam && rm -rf seam.tar.xz
          git clone https://github.com/TrafeX/docker-php-nginx.git docker-php-nginx
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Build image for test
        if: steps.prepare_softwares.outputs.status == 'success' && !cancelled()
        id: build_test
        run: |-
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Smoke test image
        if: steps.build_test.outputs.status == 'success' && !cancelled()
        id: test
        run: |-
          docker-compose -f docker-compose.test.yml up -d app
          sleep 2
          docker-compose -f docker-compose.test.yml run sut
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        if: steps.test.outputs.status == 'success' && !cancelled()
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build test image and push test tag
        if: steps.test.outputs.status != 'success' && !cancelled()
        run: |-
          docker buildx build \
            --cache-from=$IMAGE_NAME:latest \
            --push \
            -t $IMAGE_NAME:test \
            --platform linux/amd64 \
            .
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Build image and push latest tag
        id: latest
        if: steps.test.outputs.status == 'success' && !cancelled()
        run: |-
          docker buildx build \
            --cache-from=$IMAGE_NAME:latest \
            --push \
            -t $IMAGE_NAME:latest \
            --platform linux/amd64 \
            .
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Build image and push release tag
        id: tag_build
        if: steps.tag.outputs.status == 'success' && steps.latest.outputs.status == 'success' && !cancelled()
        run: |-
          docker buildx build \
            --cache-from=$IMAGE_NAME:latest \
            --push \
            -t $IMAGE_NAME:${{ steps.tag.outputs.release_tag }} \
            --platform linux/amd64 \
            .
          echo "status=success" >> $GITHUB_OUTPUT

      - name: delete same tag releases
        uses: dev-drprasad/delete-older-releases@v0.2.0
        if: steps.tag_build.outputs.status == 'success' && !cancelled()
        with:
          keep_latest: 0
          delete_tags: true
          delete_tag_pattern: ${{ steps.tag.outputs.release_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      - name: upload to github release
        uses: softprops/action-gh-release@v1
        if: steps.tag_build.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          name: ${{ steps.tag.outputs.release_name }}
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt

      - name: delete old workflows
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 4